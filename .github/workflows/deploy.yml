name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image for tests
        run: docker build -t migzxc23/react-test -f ./client/Dockerfile.dev ./client

      - name: Run tests
        run: docker run -e CI=true migzxc23/react-test npm test

      - name: Build Docker images
        run: |
          docker build -t migzxc23/multi-client ./client
          docker build -t migzxc23/multi-nginx ./nginx
          docker build -t migzxc23/multi-server ./server
          docker build -t migzxc23/multi-worker ./worker

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker images
        run: |
          docker push migzxc23/multi-client
          docker push migzxc23/multi-nginx
          docker push migzxc23/multi-server
          docker push migzxc23/multi-worker

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip deployment files
        run: zip -r deploy.zip Dockerrun.aws.json .ebextensions

      - name: Upload to S3
        run: aws s3 cp deploy.zip s3://elasticbeanstalk-ap-southeast-2-767397956932/docker-multi/deploy.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2

      - name: Create new application version
        run: aws elasticbeanstalk create-application-version --application-name multi-docker --version-label ${{ github.sha }} --source-bundle S3Bucket=elasticbeanstalk-ap-southeast-2-767397956932,S3Key=docker-multi/deploy.zip
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2

      - name: Wait for environment to be ready
        run: |
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            env_status=$(aws elasticbeanstalk describe-environments --environment-names Multi-docker-env --query "Environments[0].Status" --output text)
            if [ "$env_status" == "Ready" ]; then
              echo "Environment is ready."
              break
            else
              echo "Environment is not ready. Status: $env_status. Attempt: $attempt/$max_attempts."
              attempt=$((attempt + 1))
              sleep 60
            fi
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2
        timeout-minutes: 30

      - name: Update environment
        run: |
          if [ "$env_status" == "Ready" ]; then
            aws elasticbeanstalk update-environment --environment-name Multi-docker-env --version-label ${{ github.sha }}
          else
            echo "Environment is not ready. Exiting."
            exit 1
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2

      - name: Wait for environment to update
        run: aws elasticbeanstalk wait environment-updated --environment-name Multi-docker-env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2
        timeout-minutes: 30

      - name: Check environment status
        run: |
          env_status=$(aws elasticbeanstalk describe-environments --environment-names Multi-docker-env --query "Environments[0].Status" --output text)
          if [ "$env_status" != "Ready" ]; then
            echo "Deployment failed. Rolling back to previous version ${PREVIOUS_VERSION}."
            aws elasticbeanstalk update-environment --environment-name Multi-docker-env --version-label "${PREVIOUS_VERSION}"
            aws elasticbeanstalk wait environment-updated --environment-name Multi-docker-env
            echo "Rolled back to previous version ${PREVIOUS_VERSION}."
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2
        timeout-minutes: 10

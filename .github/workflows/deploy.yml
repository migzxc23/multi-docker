name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image for tests
        run: docker build -t migzxc23/react-test -f ./client/Dockerfile.dev ./client

      - name: Run tests
        run: docker run -e CI=true migzxc23/react-test npm test

      - name: Build Docker images
        run: |
          docker build -t migzxc23/multi-client ./client
          docker build -t migzxc23/multi-nginx ./nginx
          docker build -t migzxc23/multi-server ./server
          docker build -t migzxc23/multi-worker ./worker

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker images
        run: |
          docker push migzxc23/multi-client
          docker push migzxc23/multi-nginx
          docker push migzxc23/multi-server
          docker push migzxc23/multi-worker

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Zip deployment files
        run: zip -r deploy.zip Dockerrun.aws.json .ebextensions

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ap-southeast-2
          APPLICATION_NAME: multi-docker
          ENVIRONMENT_NAME: Multi-docker-env
          VERSION_LABEL: ${{ github.sha }}
        run: |
          aws configure set default.region $AWS_REGION
          aws s3 cp deploy.zip s3://elasticbeanstalk-$AWS_REGION-767397956932/docker-multi/deploy.zip
          echo "Deployment zip file uploaded to S3."

          # Create new application version
          aws elasticbeanstalk create-application-version --application-name $APPLICATION_NAME --version-label $VERSION_LABEL --source-bundle S3Bucket=elasticbeanstalk-$AWS_REGION-767397956932,S3Key=docker-multi/deploy.zip
          echo "Created application version $VERSION_LABEL."

          # Update environment with new version
          aws elasticbeanstalk update-environment --environment-name $ENVIRONMENT_NAME --version-label $VERSION_LABEL
          echo "Updated environment $ENVIRONMENT_NAME to version $VERSION_LABEL."

          # Wait for environment to finish updating
          aws elasticbeanstalk wait environment-updated --environment-name $ENVIRONMENT_NAME
          echo "Environment $ENVIRONMENT_NAME updated successfully."

          # Check environment status
          env_status=$(aws elasticbeanstalk describe-environments --environment-names $ENVIRONMENT_NAME --query "Environments[0].Status" --output text)

          # If deployment fails, rollback to previous version
          if [ "$env_status" != "Ready" ]; then
            echo "Deployment failed. Rolling back to previous version ${PREVIOUS_VERSION}."
            aws elasticbeanstalk update-environment --environment-name $ENVIRONMENT_NAME --version-label "${PREVIOUS_VERSION}"
            echo "Rolled back to previous version ${PREVIOUS_VERSION}."

            # Wait for rollback to complete
            aws elasticbeanstalk wait environment-updated --environment-name $ENVIRONMENT_NAME

            # Check environment status again
            aws elasticbeanstalk describe-environments --environment-names $ENVIRONMENT_NAME --query "Environments[0].Status"
          fi
